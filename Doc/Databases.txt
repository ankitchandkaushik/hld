==================================================
           HLD Database Selection Cheat Sheet
==================================================

1. Relational Databases (RDBMS)
--------------------------------
Use When:
- Strong relationships (joins)
- ACID transactions needed
- Structured schema
- Moderate read/write load

Examples:
- PostgreSQL, MySQL

Typical Systems:
- Banking systems
- E-commerce order management
- Inventory systems

--------------------------------------------------

2. Key-Value Stores
---------------------
Use When:
- Fast lookup by key
- Simple data model
- Caching/session storage

Examples:
- Redis, DynamoDB

Typical Systems:
- User sessions
- Leaderboards
- Rate limiting

--------------------------------------------------

3. Document Stores
-------------------
Use When:
- Semi-structured data (e.g., JSON)
- Flexible schema
- Embedded documents

Examples:
- MongoDB, Couchbase

Typical Systems:
- User profiles
- Product catalogs
- CMS/blogs

--------------------------------------------------

4. Wide-Column Stores
-----------------------
Use When:
- Write-heavy workload
- Horizontal scalability
- Time-series/log data

Examples:
- Apache Cassandra, HBase

Typical Systems:
- Chat history
- IoT data
- Real-time analytics

--------------------------------------------------

5. Search Engines
------------------
Use When:
- Full-text search
- Filtering and aggregation
- Near real-time indexing

Examples:
- Elasticsearch, Solr

Typical Systems:
- Product/document search
- Log analysis

--------------------------------------------------

6. Graph Databases
--------------------
Use When:
- Relationship traversal
- Graph algorithms
- Non-tabular relationship modeling

Examples:
- Neo4j, Amazon Neptune

Typical Systems:
- Social networks
- Fraud detection
- Recommendation engines

--------------------------------------------------

7. Time-Series Databases
--------------------------
Use When:
- Timestamped data
- Time-based queries
- Retention/downsampling

Examples:
- InfluxDB, TimescaleDB

Typical Systems:
- System monitoring
- Sensor/IoT data
- Stock prices

--------------------------------------------------

8. Data Lakes / Analytics DBs
-------------------------------
Use When:
- Batch analytics
- Large-scale aggregation
- Append-only workloads

Examples:
- BigQuery, Apache Hive, Snowflake

Typical Systems:
- Reporting
- Data warehousing
- ML pipelines

--------------------------------------------------

Quick Summary Table
====================
| Use Case                     | DB Type             | Example               |
|-----------------------------|---------------------|------------------------|
| E-commerce Orders           | Relational           | PostgreSQL, MySQL      |
| Real-time Leaderboard       | Key-Value Store      | Redis                  |
| Social Graph                | Graph Database       | Neo4j                  |
| Product Catalog             | Document Store       | MongoDB                |
| Log Aggregation + Search    | Search Engine        | Elasticsearch          |
| Time-based Sensor Data      | Time-Series DB       | InfluxDB               |
| High-throughput Chat        | Wide-Column Store    | Cassandra              |
| Recommendation Engine       | Graph DB + Cache     | Neo4j + Redis          |
| Analytics Reporting         | Data Lake            | BigQuery, Hive         |

==================================================












==================================================
       Internals & Use Cases of Popular Databases
==================================================

1. Relational Databases (PostgreSQL, MySQL)
-------------------------------------------
Internals:
- Row-oriented storage
- B-tree indexes, ACID compliant
- Uses Write-Ahead Log (WAL) for crash recovery
- Supports joins, constraints, transactions

Why Preferred:
- Strong consistency and data integrity
- Great for structured, relational data
- Suitable for transactional systems (banking, e-commerce)

--------------------------------------------------

2. Key-Value Stores (Redis, DynamoDB)
-------------------------------------
Internals:
- Redis: in-memory, uses hash tables, skip lists
- DynamoDB: distributed hash table, sharding, eventual consistency

Why Preferred:
- Ultra-fast key-based lookup
- Scalable and suitable for session data, caching, counters

--------------------------------------------------

3. Document Stores (MongoDB, Couchbase)
---------------------------------------
Internals:
- Stores BSON (Binary JSON)
- Flexible schema, supports nested documents
- Indexing on nested fields

Why Preferred:
- Good for semi-structured data (user profiles, product catalog)
- Schema flexibility helps in rapid development

--------------------------------------------------

4. Wide-Column Stores (Cassandra, HBase)
----------------------------------------
Internals:
- Sparse row storage with column families
- LSM Trees for write-optimized performance
- Data sharded across nodes

Why Preferred:
- Write-heavy systems
- Handles large volumes of data with high availability

--------------------------------------------------

5. Search Engines (Elasticsearch, Solr)
---------------------------------------
Internals:
- Based on Apache Lucene
- Inverted index for fast text search
- Tokenization, filters, faceted search

Why Preferred:
- Optimized for full-text search and filtering
- Real-time search capabilities

--------------------------------------------------

6. Graph Databases (Neo4j, Neptune)
-----------------------------------
Internals:
- Stores nodes and edges with properties
- Index-free adjacency for fast traversals
- Query languages like Cypher and SPARQL

Why Preferred:
- Excellent for relationship-heavy data
- Used in social graphs, fraud detection

--------------------------------------------------

7. Time-Series Databases (InfluxDB, TimescaleDB)
------------------------------------------------
Internals:
- Append-only models, compression
- InfluxDB: TSM storage
- TimescaleDB: PostgreSQL extension with chunking

Why Preferred:
- Efficient for timestamped metrics
- Supports downsampling, aggregations over time

--------------------------------------------------

8. Data Lakes / Analytics DBs (Hive, BigQuery, Snowflake)
----------------------------------------------------------
Internals:
- Columnar storage (Parquet, ORC)
- Distributed vectorized execution
- Query optimization, parallel processing

Why Preferred:
- Used for large-scale analytics and batch processing
- Ideal for ML pipelines, reporting, warehousing

--------------------------------------------------

Quick Summary Table
====================
| DB Type             | Internals                        | Use Case                          |
|---------------------|-----------------------------------|------------------------------------|
| Relational          | B-tree, WAL, ACID                 | Transactions, normalized data      |
| Key-Value Store     | Hash tables, sharding             | Fast lookup, caching               |
| Document Store      | BSON, dynamic schema              | Semi-structured, evolving schemas  |
| Wide-Column Store   | LSM tree, partitioned storage     | Write-heavy, large datasets        |
| Search Engine       | Inverted index, tokenization      | Full-text search, filtering        |
| Graph DB            | Nodes/edges, index-free adjacency | Relationships, traversals          |
| Time-Series DB      | Chunking, compression             | Time-based data, metrics           |
| Analytics DB        | Columnar, distributed execution   | Reporting, batch analytics         |

==================================================
